---
layout:     post
title:      "微服务之服务注册与发现（Eureka）"
subtitle:   " \"Hello SpringBoot, Hello SpringClould\""
date:       2018-10-31 12:00:00
author:     "墨城烟柳（Mcyl）"
header-img: "img/post-bg-os-metro.jpg"
catalog: true
tags:
    - 手把手教你玩转SpringCloud
---

> “Hello everyone! ”


## SpringCloud简介

SpringCloud为开发人员提供了快速构建分布式系统的一些工具，包括配置管理、服务发现、断路器、路由、微代理、事件总线、
全局锁、决策竞选、分布式会话等等。它运行环境简单，可以在开发人员的电脑上跑。另外说明spring cloud是基于springboot的，
所以需要开发中对SpringBoot有一定的了解。此案例以Idea开发。

## 创建服务注册中心
在这里，我们需要用的的组件上Spring Cloud Netflix的Eureka ,Eureka是一个服务注册和发现模块

### 第一步： 

首先创建一个maven主工程。

### 第二步： 

然后创建2个model工程:一个model工程作为服务注册中心，即EurekaServer,另一个作为EurekaClient。

####  步骤：

右键工程->创建创建module->选择spring initialir->cloud discovery->eureka server,然后一直下一步就行了。

####  创建完成后：

	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<modelVersion>4.0.0</modelVersion>

		<groupId>com.test</groupId>
		<artifactId>eureka-server</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<packaging>jar</packaging>

		<name>eureka-server</name>
		<description>Demo project for Spring Boot</description>

		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.1.0.RELEASE</version>
			<relativePath/> <!-- lookup parent from repository -->
		</parent>

		<properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
			<java.version>1.8</java.version>
			<spring-cloud.version>Greenwich.M1</spring-cloud.version>
		</properties>

		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
		</dependencies>

		<dependencyManagement>
			<dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-dependencies</artifactId>
					<version>${spring-cloud.version}</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>

		<build>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>

		<repositories>
			<repository>
				<id>spring-milestones</id>
				<name>Spring Milestones</name>
				<url>https://repo.spring.io/milestone</url>
				<snapshots>
					<enabled>false</enabled>
				</snapshots>
			</repository>
		</repositories>


	</project>

### 第三步： 

启动一个服务注册中心，只需要一个注解@EnableEurekaServer，这个注解需要在SpringBoot工程的启动application类上：

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

	@EnableEurekaServer
	@SpringBootApplication
	public class EurekaServerApplication {

		public static void main(String[] args) {
			SpringApplication.run(EurekaServerApplication.class, args);
		}
	}

### 第四步： 

配置appication.yml文件：

	server:
	  port: 9871
	  
	eureka:
	  instance:
		hostname: localhost
	  client:
		registerWithEureka: false
		fetchRegistry: false
		service-url:
		  defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/

	####通过eureka.client.registerWithEureka：false和fetchRegistry：false来表明自己是一个EurekaServer。注意每个冒号后面要有空格，否则无效。

### 第五步： 

EurekaServer是有界面的，启动工程,打开浏览器访问：http://localhost:98761 ,就会显示界面。提示：No application available 没有服务被发现,因为没有注册服务下面我们开始注册服务。

### 第六步：

创建一个服务提供者 (EurekaClient)
当client向server注册时，它会提供一些元数据，例如主机和端口，URL，主页等。EurekaServer 从每个client实例接收心跳消息。 如果心跳超时，则通常将该实例从注册server中删除。

####   步骤：

右键工程->创建创建module->选择spring initialir->web->web,cloud discovery->eureka discovery,然后一直下一步就行了。

####   创建完成后：

	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<modelVersion>4.0.0</modelVersion>

		<groupId>com.test</groupId>
		<artifactId>eureka-client</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<packaging>jar</packaging>

		<name>eureka-client</name>
		<description>Demo project for Spring Boot</description>

		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.1.0.RELEASE</version>
			<relativePath/> <!-- lookup parent from repository -->
		</parent>

		<properties>
			<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
			<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
			<java.version>1.8</java.version>
			<spring-cloud.version>Greenwich.M1</spring-cloud.version>
		</properties>

		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
		</dependencies>

		<dependencyManagement>
			<dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-dependencies</artifactId>
					<version>${spring-cloud.version}</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>

		<build>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>

		<repositories>
			<repository>
				<id>spring-milestones</id>
				<name>Spring Milestones</name>
				<url>https://repo.spring.io/milestone</url>
				<snapshots>
					<enabled>false</enabled>
				</snapshots>
			</repository>
		</repositories>

	</project>

###  第七步：

通过注解@EnableEurekaClient 表明自己是一个EurekaClient。

	import org.springframework.beans.factory.annotation.Value;
	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.RestController;

	@SpringBootApplication
	@EnableEurekaClient
	@RestController
	public class EurekaClientApplication {

		public static void main(String[] args) {
			SpringApplication.run(EurekaClientApplication.class, args);
		}

		@Value("${server.port}") String port;

		@RequestMapping("/hello")
		public String home(@RequestParam String name) {
			return "hello: "+name+",i am from port:" +port;
		}

	}

###  第八步：

配置application.yml文件

	server:
	  port: 9872
	spring:
	  application:
		name: eureka-client
	eureka:
	  client:
		service-url:
		  defaultZone: http://localhost:9871/eureka/

####  启动工程：

打开http://localhost:9871 ，即可显示eurekaclient网址，你会发现一个服务已经注册在服务中了，服务名为eureka-client ,端口为9872。

####  预览：

打开 http://localhost:9872/hello?name=handsomeman ，你会在浏览器上看到：hello: handsomeman,i am from port:9872

####  源码下载：

[https://github.com/mochengyanliu/SpringCloudLearn/tree/master/section1](https://github.com/mochengyanliu/SpringCloudLearn/tree/master/section1)

