---
layout:     post
title:      "微服务之高可用的服务注册中心（Eureka）"
subtitle:   " \"Hello SpringBoot, Hello SpringClould\""
date:       2019-01-16 12:00:00
author:     "墨城烟柳（Mcyl）"
header-img: "img/post-bg-os-metro.jpg"
catalog: true
tags:
    - 手把手教你玩转SpringCloud
---

> “Hello everyone! ”


## 高可用的服务注册中心（Eureka）简介

SpringCloud Eureka是云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移，并且支持集群部署。



## 第一步：创建条件

创建一个maven主工程.


## 第二步：创建eureka-server工程： 


右键工程->创建module->选择spring initialir->cloud discovery->eureka server,然后一直下一步就行了。


####  创建完成后：

	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<modelVersion>4.0.0</modelVersion>
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.1.2.RELEASE</version>
			<relativePath/> <!-- lookup parent from repository -->
		</parent>
		<groupId>com.test</groupId>
		<artifactId>eureka-server</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<name>eureka-server</name>
		<description>Demo project for Spring Boot</description>

		<properties>
			<java.version>1.8</java.version>
			<spring-cloud.version>Greenwich.RC2</spring-cloud.version>
		</properties>

		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
		</dependencies>

		<dependencyManagement>
			<dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-dependencies</artifactId>
					<version>${spring-cloud.version}</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>

		<build>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>

		<repositories>
			<repository>
				<id>spring-milestones</id>
				<name>Spring Milestones</name>
				<url>https://repo.spring.io/milestone</url>
			</repository>
		</repositories>

	</project>


	

#### 配置appication.yml文件：

	server:
	  port: 9871
	spring:
	  profiles: peer1
	  application:
		name: peer1
	eureka:
	  instance:
		hostname: peer1
	  client:
		service-url:
		  defaultZone: http://peer2:9872/eureka/

## 第三步 配置主程序

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

	@SpringBootApplication
	@EnableEurekaServer
	public class EurekaServerApplication {

		public static void main(String[] args) {
			SpringApplication.run(EurekaServerApplication.class, args);
		}

	}
	
	
## 第四步：创建eureka-server2工程： 

选择配置包不变，配置appication.yml文件：

	server:
	  port: 9872
	spring:
	  profiles: peer2
	  application:
		name: peer2
	eureka:
	  instance:
		hostname: peer2
	  client:
		service-url:
		  defaultZone: http://peer1:9871/eureka/

## 第五步：创建eureka-client工程： 


右键工程->创建module->选择spring initialir->cloud discovery->eureka client,然后一直下一步就行了。


####  创建完成后：

	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<modelVersion>4.0.0</modelVersion>
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.1.2.RELEASE</version>
			<relativePath/> <!-- lookup parent from repository -->
		</parent>
		<groupId>com.test</groupId>
		<artifactId>eureka-client</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<name>eureka-client</name>
		<description>Demo project for Spring Boot</description>

		<properties>
			<java.version>1.8</java.version>
			<spring-cloud.version>Greenwich.RC2</spring-cloud.version>
		</properties>

		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
		</dependencies>

		<dependencyManagement>
			<dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-dependencies</artifactId>
					<version>${spring-cloud.version}</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>

		<build>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>

		<repositories>
			<repository>
				<id>spring-milestones</id>
				<name>Spring Milestones</name>
				<url>https://repo.spring.io/milestone</url>
			</repository>
		</repositories>

	</project>


	

#### 配置appication.yml文件：

	server:
	  port: 9873
	spring:
	  application:
		name: eureka-client
	eureka:
	  client:
		service-url:
		  defaultZone: http://peer1:9871/eureka/

## 第六步 配置主程序

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestParam;
	import org.springframework.web.bind.annotation.RestController;

	@SpringBootApplication
	@EnableEurekaClient
	@RestController
	public class EurekaClientApplication {

		public static void main(String[] args) {
			SpringApplication.run(EurekaClientApplication.class, args);
		}

		@RequestMapping("hello")
		public String hello(@RequestParam String name){
			return "hello, " + name;
		}
	}


## 第七步 启动程序

配置Configurations

EurekaServerApplication的Program arguments：

	--spring.profiles.active=peer1
	 
EurekaServer2Application的Program arguments：

	--spring.profiles.active=peer2


启动eureka-server，eureka-server2,eureka-client

访问：localhost:9871，你会发现注册了eureka-client，并且有个peer2节点，同理访问localhost:9872你会发现有个peer1节点。
client只向9871注册，但是你打开9872，你也会发现，9872也有 client的注册信息。

访问：http://localhost:9873/hello?name=handsomeman，浏览器出现：

hello, handsomeman

然后随便关闭一台server，

同理，访问：http://localhost:9873/hello?name=handsomeman，浏览器出现：

hello, handsomeman

Eureka-eserver peer1 9871,Eureka-eserver peer2 9872相互感应，当有服务注册时，两个Eureka-eserver是对等的，
它们都存有相同的信息，这就是通过服务器的冗余来增加可靠性，当有一台服务器宕机了，服务并不会终止，
因为另一台服务存有相同的数据。


####  源码下载：

[https://github.com/mochengyanliu/SpringCloudLearn/tree/master/section10](https://github.com/mochengyanliu/SpringCloudLearn/tree/master/section10)

