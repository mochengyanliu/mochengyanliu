---
layout:     post
title:      "微服务之断路器（Hystrix）"
subtitle:   " \"Hello SpringBoot, Hello SpringClould\""
date:       2019-01-09 12:00:00
author:     "墨城烟柳（Mcyl）"
header-img: "img/post-bg-os-metro.jpg"
catalog: true
tags:
    - 手把手教你玩转SpringCloud
---

> “Hello everyone! ”


## 断路器（Hystrix）简介

断路器（Hystrix）由来：

在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。
为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，如果单个服务出现问题，调用这个服务就会出
现线程阻塞，此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务
系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。为了解决这个问题，业界提出了断路器模型。

Netflix创建了一个名为hystrix的库，用于实现断路器模式。在微服务体系结构中，通常有多个服务调用层。 



## 第一步：创建条件

这一篇文章基于[上一篇](https://mochengyanliu.github.io/2018/10/31/微服务之服务注册与发现-Eureka-2018/)文章的工程，
启动EurekaServer工程；启动EurekaClient工程，它的端口为8762


## 第二步：在ribbon使用断路器： 

右键工程->创建module->选择spring initialir->web->web,cloud discovery->eureka discovery,cloud routing->ribbon,cloud circuit breaker->hystrix,然后一直下一步就行了。

####  创建完成后：

	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<modelVersion>4.0.0</modelVersion>
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.1.1.RELEASE</version>
			<relativePath/> <!-- lookup parent from repository -->
		</parent>
		<groupId>com.test</groupId>
		<artifactId>service-ribbon</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<name>service-ribbon</name>
		<description>Demo project for Spring Boot</description>

		<properties>
			<java.version>1.8</java.version>
			<spring-cloud.version>Greenwich.RC2</spring-cloud.version>
		</properties>

		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
		</dependencies>

		<dependencyManagement>
			<dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-dependencies</artifactId>
					<version>${spring-cloud.version}</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>

		<build>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>

		<repositories>
			<repository>
				<id>spring-milestones</id>
				<name>Spring Milestones</name>
				<url>https://repo.spring.io/milestone</url>
			</repository>
		</repositories>

	</project>



	

#### 配置appication.yml文件：

	server:
	  port: 9873
	eureka:
	  client:
		service-url:
		  defaultZone: http://localhost:9871/eureka/
	spring:
	  application:
		name: service-ribbon


## 第三步 配置启动类

在工程的启动类中添加@EnableHystrix注解开启Hystrix：

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
	import org.springframework.cloud.client.loadbalancer.LoadBalanced;
	import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
	import org.springframework.cloud.netflix.hystrix.EnableHystrix;
	import org.springframework.context.annotation.Bean;
	import org.springframework.web.client.RestTemplate;

	@SpringBootApplication
	@EnableEurekaClient
	@EnableDiscoveryClient
	@EnableHystrix
	public class ServiceRibbonApplication {

		public static void main(String[] args) {
			SpringApplication.run(ServiceRibbonApplication.class, args);
		}

		@Bean
		@LoadBalanced
		RestTemplate restTemplate(){
			return new RestTemplate();
		}
	}


## 第四步：改写HelloService类

在helloService方法上加上@HystrixCommand注解。该注解对该方法创建了熔断器的功能，并指定了fallbackMethod熔断方法，熔断方法直接返回了一个字符串，代码如下：

	import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;
	import org.springframework.web.client.RestTemplate;

	@Service
	public class HelloService {
		@Autowired
		RestTemplate restTemplate;

		@HystrixCommand(fallbackMethod = "helloError")
		public String helloService(String name){
			return restTemplate.getForObject("http://eureka-client/hello?name=" + name,String.class);
		}

		public String helloError(String name){
			return "hello,"+name+",sorry,error!";
		}
	}


## 第五步：改写主程序类

ServiceRibbonApplication加@EnableHystrix注解开启Hystrix，代码如下：

	import org.springframework.boot.SpringApplication;
	import org.springframework.boot.autoconfigure.SpringBootApplication;
	import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
	import org.springframework.cloud.client.loadbalancer.LoadBalanced;
	import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
	import org.springframework.cloud.netflix.hystrix.EnableHystrix;
	import org.springframework.context.annotation.Bean;
	import org.springframework.web.client.RestTemplate;

	@SpringBootApplication
	@EnableEurekaClient
	@EnableDiscoveryClient
	@EnableHystrix
	public class ServiceRibbonApplication {

		public static void main(String[] args) {
			SpringApplication.run(ServiceRibbonApplication.class, args);
		}

		@Bean
		@LoadBalanced
		RestTemplate restTemplate(){
			return new RestTemplate();
		}
	}

## 第六步：启动所有工程

打开 http://localhost:9873/hello?name=handsomeman ，你会在浏览器上看到显示：

hello: handsomeman,i am from port:9872

当我们关闭eureka-client工程时，再次访问 http://localhost:9873/hello?name=handsomeman，浏览器会显示：

hello,handsomeman,sorry,error!

这就说明当eureka-client工程不可用的时候，service-ribbon调用eureka-client的API接口时，会执行快速失败，直接返回一组字符串，而不是等待响应超时，这很好的控制了容器的线程阻塞。

## 第七步：Feign中使用断路器

右键工程->创建module->选择spring initialir->web->web,cloud discovery->eureka discovery,cloud routing->feign,然后一直下一步就行了。

####  创建完成后：

	<?xml version="1.0" encoding="UTF-8"?>
	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		<modelVersion>4.0.0</modelVersion>
		<parent>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-parent</artifactId>
			<version>2.1.1.RELEASE</version>
			<relativePath/> <!-- lookup parent from repository -->
		</parent>
		<groupId>com.test</groupId>
		<artifactId>service-feign</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<name>service-feign</name>
		<description>Demo project for Spring Boot</description>

		<properties>
			<java.version>1.8</java.version>
			<spring-cloud.version>Greenwich.RC2</spring-cloud.version>
		</properties>

		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-openfeign</artifactId>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<scope>test</scope>
			</dependency>
		</dependencies>

		<dependencyManagement>
			<dependencies>
				<dependency>
					<groupId>org.springframework.cloud</groupId>
					<artifactId>spring-cloud-dependencies</artifactId>
					<version>${spring-cloud.version}</version>
					<type>pom</type>
					<scope>import</scope>
				</dependency>
			</dependencies>
		</dependencyManagement>

		<build>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
			</plugins>
		</build>

		<repositories>
			<repository>
				<id>spring-milestones</id>
				<name>Spring Milestones</name>
				<url>https://repo.spring.io/milestone</url>
			</repository>
		</repositories>

	</project>




	

#### 配置appication.yml文件

Feign是自带断路器的，它没有默认打开。需要在配置文件中配置打开它，在配置文件加以下代码：

	server:
	  port: 9874
	eureka:
	  client:
		service-url:
		  defaultZone: http://localhost:9871/eureka/
	spring:
	  application:
		name: service-feign
	feign:
	  hystrix:
		enabled: true


## 第八步 改写HelloService类

只需要在HelloService接口的注解中加上fallback的指定类：

	import com.test.servicefeign.service.impl.HelloServiceImpl;
	import org.springframework.cloud.openfeign.FeignClient;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;
	import org.springframework.web.bind.annotation.RequestParam;

	@FeignClient(value = "eureka-client",fallback = HelloServiceImpl.class)
	public interface HelloService {

		@RequestMapping(value = "hello", method = RequestMethod.GET)
		String sayHelloFromClient(@RequestParam(value = "name") String name);
	}


## 第九步：实现HelloService类

HelloService需要实现sayHelloFromClient接口，并注入到Ioc容器中，代码如下，代码如下：

	import com.test.servicefeign.service.HelloService;
	import org.springframework.stereotype.Component;

	@Component
	public class HelloServiceImpl implements HelloService {
		@Override
		public String sayHelloFromClient(String name) {
			return "sorry " + name;
		}
	}


## 第十步：启动所有工程（不包含service-ribbon）

打开 http://localhost:9874/hello?name=handsomeman ，你会在浏览器上看到显示：

hello: handsomeman,i am from port:9872

当我们关闭eureka-client工程时，再次访问 http://localhost:9874/hello?name=handsomeman，浏览器会显示：

sorry handsomeman

这就说明断路器起作用了。


####  源码下载：

[https://github.com/mochengyanliu/SpringCloudLearn/tree/master/section4](https://github.com/mochengyanliu/SpringCloudLearn/tree/master/section4)

